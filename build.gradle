import java.nio.file.Files
import java.text.DateFormat
import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
    mavenCentral()
}

def runeLiteVersion = getRuneLiteVersion()

static def getRuneLiteVersion() {
    URL url = new URL("http://repo.runelite.net/net/runelite/client/")
    URLConnection urlConnection = url.openConnection()
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(
            urlConnection.getInputStream()))
    String latestName = null
    String inputLine
    while ((inputLine = bufferedReader.readLine()) != null) {
        inputLine = inputLine.trim().replaceAll(" +", " ")
        if (inputLine.contains("/\">") && inputLine.contains("</a>")) {
            String name = inputLine.substring(inputLine.indexOf("/\">") + 3, inputLine.indexOf("</a>") - 1)
            String removeName = inputLine.substring(inputLine.indexOf("</a>") + 4)
            if (!name.contains("SNAPSHOT") && removeName != "") {
                if (compareSemanticVersion(latestName, name)) {
                    latestName = name
                }
            }
        }
    }
    bufferedReader.close()
    return latestName
}

static def compareSemanticVersion(String s1, String s2) {
    if (s1 != null && s2 != null) {
        while (true) {
            if (s1.indexOf('.') != -1 && s2.indexOf('.') != -1) {
                if (s1.substring(0, s1.indexOf('.')) == s2.substring(0, s2.indexOf('.'))) {
                    s1 = s1.substring(s1.indexOf('.') + 1)
                    s2 = s2.substring(s2.indexOf('.') + 1)
                }
                else {
                    if (s1.indexOf('.') != -1) {
                        s1 = s1.substring(0, s1.indexOf('.'))
                    }
                    if (s2.indexOf('.') != -1) {
                        s2 = s2.substring(0, s2.indexOf('.'))
                    }
                    return Integer.parseInt(s1).intValue() < Integer.parseInt(s2).intValue()
                }
            }
            else {
                if (s1.indexOf('.') != -1) {
                    s1 = s1.substring(0, s1.indexOf('.'))
                }
                if (s2.indexOf('.') != -1) {
                    s2 = s2.substring(0, s2.indexOf('.'))
                }
                return Integer.parseInt(s1).intValue() < Integer.parseInt(s2).intValue()
            }
        }
    }
    return s1 == null && s2 != null
}


dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'

    implementation group: 'net.sf.jopt-simple', name:'jopt-simple', version: '5.0.4'

    compileOnly group: 'net.runelite', name:'client', version: runeLiteVersion

    testImplementation group: 'net.runelite', name:'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name:'jshell', version: runeLiteVersion
    //We want these both at compile and at runtime.
    //So we use implementation instead of compileOnly or runtimeOnly
    // implementation project(":OSRSBot")
    implementation 'com.github.OSRSB:OSRSBot:master-SNAPSHOT'
    //implementation project(":DaxWalkerRSB")
    implementation 'com.github.OSRSB:DaxWalkerOSRSBot:master-SNAPSHOT'
}

group = 'osrsb'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDirs= ["src/main/java"]
        }
    }
}

jar {
    configurations.implementation.setCanBeResolved(true)
    from {
        configurations.implementation.filter {it.name.startsWith('Dax')}.collect {zipTree(it)}
    }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

class ScriptTask extends DefaultTask {
    enum OperatingSystem {
        MAC, WINDOWS, LINUX, UNKNOWN
    }

    static def getOperatingSystem() {
        final String os = System.getProperty("os.name")
        if (os.contains("Mac")) {
            return OperatingSystem.MAC
        } else if (os.contains("Windows")) {
            return OperatingSystem.WINDOWS
        } else if (os.contains("Linux")) {
            return OperatingSystem.LINUX
        } else {
            return OperatingSystem.UNKNOWN
        }

    }

    static String getBotScriptDirectory() {
        final String NAME = "OsrsBot"
        final String SCRIPT_DIRECTORY = "/Scripts/Sources/"
        final String env = System.getenv(NAME.toUpperCase().concat("_HOME"))
        if (env == null || env.isEmpty()) {
            String homeDirBuilder = System.getProperty("user.home")
            switch(getOperatingSystem()) {
                case OperatingSystem.LINUX:
                    homeDirBuilder += File.separator + ".config"
                    break
                case OperatingSystem.MAC:
                    homeDirBuilder += (homeDirBuilder == null) ? "~" : ""
                    break
                case OperatingSystem.WINDOWS:
                    //Do nothing
                    break
                default:
                    //If you're using Solaris or something you're wrong.
                    break
            }
            return (homeDirBuilder + File.separator + NAME + SCRIPT_DIRECTORY)
        }
        return env
    }

    @InputDirectory
    var scriptDependency =
            project.file("${project.buildDir}/classes")

    @OutputDirectory
    var outputDir =
            project.file(getBotScriptDirectory())

    @TaskAction
    def copyFiles() {
        if (!outputDir.exists())
            Files.copy(scriptDependency.toPath(), outputDir.toPath())
    }
}

task outputToScriptDirectory(type: ScriptTask) {
    dependsOn(classes)
}

task launchClientWithScript(type: JavaExec) {
    group = "Execution"
    description = "Runs the main method within RSB"
    classpath = sourceSets.main.runtimeClasspath
    getMainClass() set "net.runelite.rsb.botLauncher.Application"
    jvmArgs "-debug"
    args "--bot-runelite --developer-mode".split(" ")
    dependsOn(outputToScriptDirectory)
}

task dockerBuild(type: Exec) {
    group = "Docker"
    description = "Builds the docker image"
    // sourceSets.main.java.getDestinationDirectory().set(file("build/scripts"))
    //This allows us to assign the build directory to where our bot will search for scripts in.
    commandLine 'docker', 'build', '-t', 'bot-image', '.'
    dependsOn classes
}

task dockerRun(type: Exec) {
    group = "Docker"
    description = "Runs the Docker image on the host XServer"
    commandLine 'docker', 'run', '-e', 'DISPLAY=host.docker.internal:0', '-t', '--rm', 'bot-image', '---headless'
}
